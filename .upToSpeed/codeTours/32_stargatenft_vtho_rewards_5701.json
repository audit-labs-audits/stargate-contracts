{
  "title": "3.2: StargateNFT: VTHO Rewards",
  "id": "OD+HRRuW1eLt+4JI4ZF8oPXdOQiFxXvbiegRvatmQrw=",
  "originalId": 5701,
  "position": 6,
  "steps": [
    {
      "type": "textOnly",
      "description": "Welcome to our walkthrough of the **StargateNFT VTHO rewards system**. We'll explore how the `VetGeneratedVtho.sol` library handles the calculation and claiming of **VTHO rewards** generated by staked **VET tokens**.",
      "title": "",
      "id": "71605"
    },
    {
      "type": "revealFiles",
      "files": [
        "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol"
      ],
      "description": "This is the `VetGeneratedVtho.sol` library that contains all the logic for managing VTHO rewards in the StargateNFT system.",
      "title": "",
      "id": "71606",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The core concept is explained in the `library`'s documentation. VeChain has a dual-token model where **VET** holders automatically generate **VTHO** over time. The generation rate is `0.000432 VTHO per VET per day`, which equals `5\\times10^{-9} VTHO per VET per second`.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 22,
          "end": 25
        }
      ],
      "title": "",
      "id": "71607",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "While there's no `VTHO_PER_VET_PER_SECOND` constant defined, the generation rate is hardcoded directly in the `calculateVTHO` function. On line 139, the rate of 5Ã—10^-9 VTHO per VET per second is implemented as `(_vetAmount * 5) / (10 ** 9)` where `5` is the numerator and `10^9` is the denominator of the generation rate.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 130,
          "end": 140
        }
      ],
      "title": "",
      "id": "71608",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `calculateVTHO` function implements the core reward formula. As the comment on lines 124-125 explains, the logic follows the official VTHO generation rate. Line 139 translates this formula directly into code, using the provided VET amount and the time difference to calculate the rewards.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 123,
          "end": 139
        }
      ],
      "title": "",
      "id": "71609",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `_claimableRewards` function determines pending rewards for a specific `tokenId`. It fetches the token's last claim timestamp (line 106) and uses `calculateVTHO` (line 120) to compute rewards accrued since the last claim. Note how it handles the `vthoGenerationEndTimestamp` on lines 115-118 to cap reward generation.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 102,
          "end": 121
        }
      ],
      "title": "",
      "id": "71610",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `_claimRewards` function orchestrates the reward claiming process. It validates the token exists (lines 54-56), calculates claimable rewards (line 63), checks contract balance (lines 69-72), updates the last claim timestamp (line 75), and transfers **VTHO** to the owner (line 82).",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 50,
          "end": 83
        }
      ],
      "title": "",
      "id": "71611",
      "hideAreas": []
    },
    {
      "type": "mcq",
      "description": "In the `_claimRewards` function (lines 50-83), the implementation follows the Checks-Effects-Interactions pattern to securely handle reward distribution. Which of the following accurately describes the **\"effects\"** and **\"interactions\"** steps in this function?\n\nOptions:\n\n A). The \"effect\" (updating `token.lastVthoClaimTimestamp`) occurs before the \"interaction\" (calling `safeTransfer` to send VTHO).\n\nB). The \"interaction\" (calling `safeTransfer`) occurs before the \"effect\" (updating `token.lastVthoClaimTimestamp`).\n\nC). The \"effect\" (emitting the `BaseVTHORewardsClaimed` event) occurs after the \"interaction\" (calling `safeTransfer`).\n\nD). The \"check\" for sufficient contract balance occurs after the \"interaction\" (calling `safeTransfer`).\n\n\nCorrect: A). The \"effect\" (updating `token.lastVthoClaimTimestamp`) occurs before the \"interaction\" (calling `safeTransfer` to send VTHO).\n\nExplanation: The correct answer accurately describes the application of the Checks-Effects-Interactions pattern. The function first performs checks (lines 54-72), then applies effects to its own state by updating `token.lastVthoClaimTimestamp` (line 75), and only then performs the interaction by making an external call with `safeTransfer` (line 82). Updating state before the external call is a critical security measure to prevent re-entrancy attacks, where a malicious contract could call back into the function before the state update, allowing for multiple claims.",
      "title": "",
      "id": "71615",
      "text": "In the `_claimRewards` function (lines 50-83), the implementation follows the Checks-Effects-Interactions pattern to securely handle reward distribution. Which of the following accurately describes the **\"effects\"** and **\"interactions\"** steps in this function?",
      "answers": [
        "The \"effect\" (updating `token.lastVthoClaimTimestamp`) occurs before the \"interaction\" (calling `safeTransfer` to send VTHO).",
        "The \"interaction\" (calling `safeTransfer`) occurs before the \"effect\" (updating `token.lastVthoClaimTimestamp`).",
        "The \"effect\" (emitting the `BaseVTHORewardsClaimed` event) occurs after the \"interaction\" (calling `safeTransfer`).",
        "The \"check\" for sufficient contract balance occurs after the \"interaction\" (calling `safeTransfer`)."
      ],
      "correct": 0,
      "explanation": "The correct answer accurately describes the application of the Checks-Effects-Interactions pattern. The function first performs checks (lines 54-72), then applies effects to its own state by updating `token.lastVthoClaimTimestamp` (line 75), and only then performs the interaction by making an external call with `safeTransfer` (line 82). Updating state before the external call is a critical security measure to prevent re-entrancy attacks, where a malicious contract could call back into the function before the state update, allowing for multiple claims."
    },
    {
      "type": "highlight",
      "description": "The `vthoGenerationEndTimestamp` provides a planned endpoint for reward generation. When this timestamp is set and the current time exceeds it, the reward calculation uses the end timestamp instead of the current time, effectively capping the reward generation period.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/VetGeneratedVtho.sol",
      "highlight": [
        {
          "start": 114,
          "end": 120
        }
      ],
      "title": "",
      "id": "71612",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `setVthoGenerationEndTimestamp` function in the main `StargateNFT` contract allows the admin to control when VTHO generation ends. This function can only be called when the contract is paused and requires `DEFAULT_ADMIN_ROLE` permissions, ensuring controlled management of the reward system.",
      "file": "packages/contracts/contracts/StargateNFT/StargateNFT.sol",
      "highlight": [
        {
          "start": 303,
          "end": 308
        }
      ],
      "title": "",
      "id": "71613",
      "hideAreas": []
    },
    {
      "type": "textOnly",
      "description": "This concludes our tour of the VTHO rewards system in StargateNFT. The `VetGeneratedVtho.sol` library efficiently handles the calculation, tracking, and distribution of VTHO rewards based on VeChain's dual-token economic model, with the generation rate directly embedded in the calculation formula rather than defined as a separate constant.",
      "title": "",
      "id": "71614"
    }
  ]
}