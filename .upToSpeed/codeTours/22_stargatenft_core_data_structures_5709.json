{
  "title": "2.2: StargateNFT: Core Data Structures",
  "id": "XTVV2C77lIOOcVpCEIqUD819X4BPIyC8sASH8971XqY=",
  "originalId": 5709,
  "position": 3,
  "steps": [
    {
      "type": "revealFiles",
      "files": [
        "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol"
      ],
      "description": "The core data structures for the StargateNFT contract are defined in `DataTypes.sol`. Let's start by examining the main storage struct, **StargateNFTStorage**.",
      "title": "",
      "id": "71597",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `StargateNFTStorage` struct holds the state for the contract. This layout follows the Diamond Storage pattern, isolating storage from logic to avoid collisions between facets.\n\nThe following steps dissect its fields in logical groups.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 24,
          "end": 37
        }
      ],
      "title": "",
      "id": "71598",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "These initial fields define configuration and external dependencies.\n\n- `vthoGenerationEndTimestamp` (line 25): Timestamp when VTHO rewards stop.\n- `MAX_LEVEL_ID` (line 26): Highest level ID allowed.\n- `legacyNodes` (line 27): `ITokenAuction` interface for migration.\n- `stargateDelegation` (line 28): `IStargateDelegation` interface for rewards.\n- `vthoToken` (line 29): `IERC20` interface for the VTHO token.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 25,
          "end": 29
        }
      ],
      "title": "",
      "id": "72183",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "These fields handle NFT ID generation and metadata URI.\n\n- `currentTokenId` (line 30): Next token ID to mint.\n- `baseTokenURI` (line 31): Base URL for each token's metadata.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 30,
          "end": 31
        }
      ],
      "title": "",
      "id": "72184",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "These mappings store data per NFT level.\n\n- `levels` (line 32): Maps `levelId` to a `Level` struct.\n- `circulatingSupply` (line 33): Tracks supply history via `Checkpoints.Trace208`.\n- `cap` (line 34): Defines max NFTs per level.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 32,
          "end": 34
        }
      ],
      "title": "",
      "id": "72185",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "These mappings hold data for each NFT token.\n\n- `tokens` (line 35): Maps `tokenId` to a `Token` struct.\n- `maturityPeriodEndBlock` (line 36): Records the block when maturity ends.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 35,
          "end": 36
        }
      ],
      "title": "",
      "id": "72186",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `Level` struct defines the properties of each NFT level.\n\n- `name`: The name of the level (e.g., \"Thunder\").\n- `isX`: A boolean indicating if the level corresponds to an X-Node.\n- `id`: The unique identifier for the level.\n- `maturityBlocks`: The number of blocks an NFT of this level must wait before it can start earning delegation rewards.\n- `scaledRewardFactor`: A reward multiplier for the level, scaled by 100 (e.g., a 1.5x multiplier is stored as 150).\n- `vetAmountRequiredToStake`: The amount of VET required to mint an NFT of this level.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 54,
          "end": 61
        }
      ],
      "title": "",
      "id": "71599",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "The `Token` struct stores the data for each individual `StargateNFT`. It tracks the unique `tokenId`, the `levelId` it belongs to, the `mintedAtBlock`, the `vetAmountStaked` to create it, and the `lastVthoClaimTimestamp` for reward tracking.",
      "file": "packages/contracts/contracts/StargateNFT/libraries/DataTypes.sol",
      "highlight": [
        {
          "start": 69,
          "end": 75
        }
      ],
      "title": "",
      "id": "71600",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "To manage contract state, `StargateNFT.sol` uses a storage pointer. The `_getStargateNFTStorage` function retrieves a pointer to the `StargateNFTStorage` struct located at a specific storage slot, `StargateNFTStorageLocation`. This constant is a hash that uniquely identifies the storage for this contract, preventing conflicts with other contracts in the **diamond pattern**.",
      "file": "packages/contracts/contracts/StargateNFT/StargateNFT.sol",
      "highlight": [
        {
          "start": 79,
          "end": 91
        }
      ],
      "title": "",
      "id": "71601",
      "hideAreas": []
    },
    {
      "type": "highlight",
      "description": "Here's an example of how the storage pointer is used within the `initialize` function. It gets the storage pointer and then populates the fields of the `StargateNFTStorage` struct with the initial parameters, such as contract addresses and the starting `currentTokenId`. This same pattern is used throughout the contract to read from and write to the contract's state.",
      "file": "packages/contracts/contracts/StargateNFT/StargateNFT.sol",
      "highlight": [
        {
          "start": 147,
          "end": 160
        }
      ],
      "title": "",
      "id": "71602",
      "hideAreas": []
    }
  ]
}